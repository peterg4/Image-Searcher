mod = angular.module('infiniteScroll', [])


mod.controller 'InfiniteScrollWindowController', [
  '$window', '$document',
  ($window, $document) ->
    window = angular.element $window
    document = $document[0]
  
    @getElement = () =>
      window
      
    @getHeight= () =>
      $window.innerHeight

    @getBottom = () =>
      $window.pageYOffset + document.documentElement.clientHeight
  
    return
]

mod.controller 'InfiniteScrollContainerController', [
  '$window', '$element',
  ($window, $element) ->
    window = angular.element $window
    element = $element[0]

    @getElement = () =>
      $element
      
    @getHeight = () =>
      element.clientHeight
    
    @getBottom = () =>
      element.getBoundingClientRect().bottom + $window.pageYOffset

    return
]

mod.directive 'infiniteScrollContainer', [
  '$parse',
  ($parse) ->
    restrict: 'A'
    controller: 'InfiniteScrollContainerController'
]

mod.directive 'infiniteScroll', [
  '$window', '$parse', '$timeout', '$controller',
  ($window, $parse, $timeout, $controller) ->
    restrict: 'A'
    require: ['infiniteScroll', '?^infiniteScrollContainer']
    controller: ($scope, $element, $attrs) ->
      window = angular.element $window
      element = $element[0]
      fn = $parse $attrs.infiniteScroll
    
      options =
        disabled: false
        threshold: 0.1

      @options = (opts) =>
        if angular.isDefined(opts)
          angular.extend options, opts
          @check()
        options
      
      containerCtrl = null
      @setContainerCtrl = (ctrl) =>
        containerCtrl = ctrl if angular.isDefined(ctrl)
        containerCtrl
        
      @getBottom = () =>
        element.getBoundingClientRect().bottom + $window.pageYOffset

      @needMore = () =>
        return false if options.disabled
        elementBottom = @getBottom()
        containerBottom = containerCtrl.getBottom()
        remaining = elementBottom - containerBottom
        
        console.log "#{elementBottom} - #{containerBottom}"
        console.log "#{remaining} <= #{containerCtrl.getHeight() * options.threshold}"
        
        remaining <= (containerCtrl.getHeight() * options.threshold)

      lock = false
      
      @check = () =>
        if !lock and @needMore()
          lock = true
          $timeout =>
            promise = fn($scope)
            promise.then () =>
              lock = false
              $timeout @check
            promise.catch () =>
              lock = false

      return

    link: (scope, element, attrs, ctrls) ->
      thisCtrl = ctrls[0]
      containerCtrl = ctrls[1] or $controller('InfiniteScrollWindowController')

      containerElement = containerCtrl.getElement()
      thisCtrl.setContainerCtrl containerCtrl

      checker = () =>
        thisCtrl.check()
    
      containerElement.on 'scroll', checker
      scope.$on '$destroy', () =>
        containerElement.off 'scroll', checker
        
      if angular.isDefined(attrs.infiniteScrollOptions)
        options = $parse attrs.infiniteScrollOptions
        optionsWatch = () => options(scope)
        optionsChange = (value) =>
          if angular.isDefined(value)
            thisCtrl.options(value or {})
        scope.$watch optionsWatch, optionsChange, true  
      else
        checker()
        
      return
]